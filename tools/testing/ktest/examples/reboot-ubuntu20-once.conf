# Besides a few lines to adjust at the top, this sample, short
# configuration file should drive any Ubuntu 20.04 target (and likely
# other distributions) without any change and save you the most common
# ktest pitfalls.

# Alternatively, ktest.pl has an "interactive" mode to generate your
# first configuration. Simply run ktest.pl without any configuration
# file.

# ktest's documentation is... "sparse" so for further info you want to
# look at other files in this examples/ directory too.


# Options set before the first TEST_START are considered to be default
# options. These options can be overridden by test specific options,
# with some exceptions.

SSH_USER = root
MACHINE = up2.lan

# Build directory. Don't confuse with the source directory BUILD_DIR(!)
# below.  You must create this directory and MAKE SURE you have a
# .config there before running ktest.pl

# tmpfs is faster
OUTPUT_DIR = /tmp/ktestbuild/

# The difference between config variables := and ktest options = is
# explained in examples/sample.conf

# This MUST match the start of the top kernel Makefile
MY_KVERSION := 5.7.0-rc3
# ktest wants this. It can be anything you want but see the next two
# variables.
LOCALVERSION = -sof

KERNELRELEASE := ${MY_KVERSION}${LOCALVERSION}+

# This is how ktest finds which GRUB menuentry to boot once. To create a
# new menuentry copy some existing /boot/vmlinuz and initrd files and
# run "update-grub". Then make sure your grub-set-default is NOT the
# line used by ktest so it can act as a fallback. As update-grub adds
# and removes entries, it may accidentally change your default.
GRUB_MENU = 'Ubuntu, with Linux ${KERNELRELEASE}'

# PWD is a ktest.pl variable that will result in the process working
# directory that ktest.pl is executed in.
MY_TEST_DIR := ${PWD}

# A tty or ssh retry loop must be continuously banging this fifo
MONITOR_FIFO := ${MY_TEST_DIR}/monitor-ktest.fifo


# If you understand the consequences and risk really well, you can
# comment this out and save a few seconds.
POST_INSTALL = test $(make O=${OUTPUT_DIR} kernelrelease | grep -v directory) = "${KERNELRELEASE}" && ssh ${SSH_USER}@${MACHINE} update-initramfs -c -k "${KERNELRELEASE}"

REBOOT_ON_SUCCESS = 0
REBOOT_ON_ERROR = 0

#### Each TEST_START label will set up a new test ####

# FIXME: figure out why any second test times out while running ktest.pl
# multiple times works just fine.
# TEST_START ITERATE 3

TEST_START
TEST_TYPE = boot

BUILD_NOCLEAN = yes


#### More DEFAULTS ###

# You can add default options anywhere in the file as well
# with the DEFAULTS tag. This allows you to have default options
# after the test options to keep the test options at the top
# of the file. You can even place the DEFAULTS tag between
# test cases (but not in the middle of a single test case)

DEFAULTS

# Look for the "Reboot time:" line in ktest output
TIMEOUT = 60

# Must use exec to avoid child processes that ktest can't kill.
CONSOLE = test -p ${MONITOR_FIFO} && exec cat ${MONITOR_FIFO}


LOG_FILE = ${OUTPUT_DIR}/ktest.log

BUILD_OPTIONS = -j6
# Very confusing: BUILD_DIR is the name of the _source_ git worktree
# The actual build directory is OUTPUT_DIR
BUILD_DIR = ${PWD}
BUILD_TARGET = arch/x86/boot/bzImage

TARGET_IMAGE = /boot/vmlinuz-${KERNELRELEASE}

REBOOT_TYPE = grub2

GRUB_FILE = /boot/grub/grub.cfg
GRUB_REBOOT = grub-reboot

POWER_CYCLE = echo 'failed, reboot the system and press enter'; read anykey
